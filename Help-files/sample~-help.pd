#N canvas 772 71 565 597 10;
#X obj 5 568 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 5 226 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 5 433 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 5 466 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 79 443 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 149 475 1) symbol;
#X text 218 490 - audio file to load (optional), f 44;
#X text 149 490 2) symbol;
#X obj 5 512 cnv 3 550 3 empty empty flags 8 12 0 13 -228856 -1 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 23 41 cnv 4 4 4 empty empty Audio 0 28 2 18 -233017 -1 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 77 41 cnv 4 4 4 empty empty buffer 0 28 2 18 -233017 -1 0;
#X obj 3 4 cnv 15 301 42 empty empty sample~ 20 20 2 37 -233017 -1
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X msg 170 134 show;
#X msg 214 144 hide;
#X text 173 274 clear;
#X text 218 274 - fills all arrays with zeros, f 53;
#X text 218 387 - normalizes to the given float value, f 53;
#X text 218 232 - sets file to load from (no symbol opens dialog box)
;
#X text 218 302 - sets file to write to (no symbol opens dialog box)
, f 53;
#X text 218 260 - reads and loads the previously opened file again
, f 53;
#X text 143 358 sr <float>;
#X text 179 330 show;
#X text 179 344 hide;
#X text 218 330 - shows/opens buffer supbatch window, f 53;
#X text 218 344 - hides/closes buffer supbatch window, f 53;
#X text 89 288 trim <float \, float>;
#X text 131 401 size <float>;
#X text 143 415 ms <float>;
#X text 101 386 normalize <float>;
#X text 113 372 rename <symbol>;
#X text 218 373 - changes the buffer name, f 53;
#X text 125 232 load <symbol>;
#X text 167 260 reload;
#X text 125 302 save <symbol>;
#X text 125 316 depth <float>;
#X text 218 316 - sets bit depth (16 \, 24 or 32), f 53;
#X text 218 288 - trims to a sample range, f 53;
#X text 218 358 - sets file's sample rate (default: patch's), f 53
;
#N canvas 447 114 834 477 load/save 0;
#X msg 563 243 clear;
#X text 590 217 open/close buffer window;
#X text 607 242 clears all channels;
#X text 564 101 read a file specified by a symbol (.wav or .aif/.aiff)
, f 27;
#X text 502 143 without symbol: opens dialog box;
#X text 532 177 reloads the last opened file;
#X text 588 314 without symbol: opens dialog box, f 17;
#X msg 508 214 show;
#X msg 549 215 hide;
#X msg 480 178 reload;
#X msg 469 143 load;
#X msg 549 289 save test.wav;
#X msg 549 320 save;
#X text 38 190 The "save" message saves the contents of [sample~] into
an audio file. If no symbol is given \, a standard file dialog is opened
for naming the file., f 59;
#X text 38 229 You can specify a file extension with the "wav" and
"aif" messages \, but you can also specify a file extension in the
given symbol (such as "test.wav"). If you don't specify an extension
\, [sample~] saves in the same extension of the most recently opened
audio file or the last given extension message ("wav" of "aif"). By
default \, [sample~] saves in .wav format., f 59;
#X text 38 316 The "depth" message sets the bit depth for writting
files \, it accepts floats:, f 59;
#X text 161 335 16 - 16-bit integer (default) \; 24 - 24-bit integer
\; 32 - 32-bit float \;;
#X text 643 288 writes to a file;
#X text 39 125 You can specify a sound file to load as the second argument
or via the "load" message ([sample~] can load 'wav' and 'aif/aiff'
sound files). Without a given symbol \, "load" opens a dialog box.
The "reload" message reloads the last opened file.;
#X msg 456 107 load stereo.wav;
#X obj 445 361 else/sample~ buffer_\$0 -ch 2;
#X obj 445 394 else/display;
#X msg 419 68 load stereo.wav 44100 88200;
#X msg 446 33 load stereo.wav 44100;
#X connect 0 0 20 0;
#X connect 7 0 20 0;
#X connect 8 0 20 0;
#X connect 9 0 20 0;
#X connect 10 0 20 0;
#X connect 11 0 20 0;
#X connect 12 0 20 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 22 0 20 0;
#X connect 23 0 20 0;
#X restore 466 147 pd load/save;
#X text 218 401 - sets maximum buffer size in samples, f 53;
#X text 218 415 - sets maximum buffer size in ms, f 53;
#X text 135 521 -size <float> - sets maximum buffer size in samples
;
#X text 146 535 -ms <float> - sets maximum buffer size in ms, f 45
;
#N canvas 1006 207 454 461 details 0;
#X text 150 60 <= check internal array;
#X text 69 138 Similar to:;
#X text 267 139 <= click to open;
#X obj 67 201 soundfiler;
#X obj 153 139 table vanilla_\$0;
#X text 31 246 But [sample~] is also able to define multi channel arrays
(up to 64). The convention for channel ordering is the buffer name
preceded by the channel number (from 0) and "-". For instance \, a
4 channel [sample~] object named "test" has arrays named as: "0-test"
\, "1-test" \, "2-test" and "3-test"!;
#X text 30 16 [sample~] is based on vanilla's [soundfiler] \, which
loads audio files into tables and can write sound files from given
tables.;
#X msg 117 59 show;
#X text 31 316 On the other hand \, for single or "mono" samples \,
the name "test" generates an internal array also named: "test".;
#X text 31 354 You can use pd vanilla's objects (such as [tabreceive~]
\, [tabplay~] \, [tabread4~] and [array]) to access the internal arrays
of [sample~]. In the case of a multi channel buffer \, you have to
give it the correct table name according to a specific channel.;
#X obj 67 168 else/initmess read -resize else/violin.wav vanilla_\$0
;
#X obj 117 86 else/sample~ else_\$0 violin.wav;
#X connect 7 0 11 0;
#X connect 10 0 3 0;
#X restore 479 127 pd details;
#X text 111 172 click =>;
#X obj 81 233 cnv 17 3 197 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 119 445 list <f \, f \, f>;
#X text 218 445 - sample's size \, sample rate and channels, f 53
;
#X text 73 84 [sample~] is an abstraction that creates an audio buffer
which you can use to load a sample or record into. It can load and
save multichannel files., f 62;
#X text 218 475 - buffer name (default sample_\$0), f 44;
#X text 146 550 -ch <float> - sets number of channels (default 1);
#N canvas 754 82 467 586 rec/play 0;
#X obj 121 335 tgl 20 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 74 200 else/setdsp~;
#X obj 113 423 tgl 20 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 114 495 else/out~;
#X msg 211 237 show;
#X obj 191 319 else/cusp~ 250;
#X obj 262 347 else/rampnoise~ 490;
#X text 50 339 record =>;
#X text 145 426 <= play;
#X msg 192 195 ms 2000;
#X text 251 237 <= click;
#X text 34 28 You can use [sample~] to define a buffer that you can
record into. Below we have a stereo buffer. By default \, the buffer
size is one second. You can set the size at creation by using flags
either in samples (with '-size') or in ms (with '-ms'). Note that if
you are using [sample~] to load files \, this will also set a maximum
size for the loaded sample. You can change the size with the 'size'
or 'ms' messages \, which will also set a maximum limit for loading
samples., f 61;
#X text 250 195 <= change from default (1 second) to 2 seconds, f
24;
#X obj 192 267 else/sample~ buf_\$0 -ch 2;
#X obj 121 375 else/tabwriter~ buf_\$0 2;
#X text 33 124 You can use [tabwrite~] or \, alternatively \, [else/tabwriter~]
from ELSE to record into arrays with multi-channel support. Moreover
\, you can use [tabplay~] or better yet \, [tabplayer~] from ELSE (which
also has multi-channel support)., f 64;
#X obj 113 458 else/tabplayer~ buf_\$0 2 -loop;
#X connect 0 0 14 0;
#X connect 2 0 16 0;
#X connect 4 0 13 0;
#X connect 5 0 14 1;
#X connect 6 0 14 2;
#X connect 9 0 13 0;
#X connect 16 0 3 0;
#X connect 16 1 3 1;
#X restore 472 168 pd rec/play;
#X text 179 246 info;
#X text 218 246 - re output size \, sample rate and channels, f 53
;
#X obj 170 195 else/display;
#X msg 125 134 info;
#X obj 170 172 else/sample~ \$0-sample stereo.wav;
#X connect 21 0 65 0;
#X connect 22 0 65 0;
#X connect 64 0 65 0;
#X connect 65 0 63 0;
