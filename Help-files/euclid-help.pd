#N struct 1014-slot float x float y float slotsize float color float
width float bordercolor;
#N canvas 649 75 560 597 12;
#X obj 193 288 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 254 288 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 167 287 hit;
#X text 223 287 rest;
#X obj 316 286 else/display;
#X obj 193 150 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 193 177 else/count 15;
#X floatatom 193 226 3 0 0 0 - - -;
#X obj 22 40 cnv 4 4 4 empty empty Euclidean 0 28 2 18 -233017 -1 0
;
#X obj 161 40 cnv 4 4 4 empty empty algorithm 0 28 2 18 -233017 -1
0;
#X obj 2 3 cnv 15 301 42 empty empty euclid 20 20 2 37 -233017 -1 0
;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 105 40 cnv 4 4 4 empty empty rythm 0 28 2 18 -233017 -1 0;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 304 3 graph;
#X floatatom 234 227 3 0 0 0 - - -;
#X floatatom 275 227 3 0 0 0 - - -;
#X floatatom 316 227 3 0 0 0 - - -;
#X text 335 283 (1 for hit \, 0 for rest), f 11;
#X text 100 227 step number:;
#X text 224 206 steps;
#X text 270 206 hits;
#X obj 193 254 else/euclid 16 7 0;
#X text 311 206 rotation;
#X obj 4 322 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 4 425 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 4 501 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 4 567 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 102 433 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 102 331 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 102 352 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 102 375 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X obj 102 456 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 102 478 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X text 184 433 bang;
#X text 223 433 - when there's a hit;
#X text 184 456 bang;
#X text 222 455 - when there's a rest;
#X text 177 478 float;
#X text 223 478 - 1 for hit \, 0 for rest;
#X text 131 507 1) float - number of steps (default 8), f 53;
#X text 131 525 2) float - number of hits (default 1), f 53;
#X text 131 542 3) float - rotation value (default 0), f 53;
#X obj 102 398 cnv 17 3 17 empty empty 3 5 9 0 16 -228856 -162280 0
;
#X text 177 351 float;
#X text 222 351 - number of steps;
#X text 223 374 - number of hits;
#X text 223 397 - rotation value;
#X text 177 374 float;
#X text 177 397 float;
#X text 177 330 float;
#X text 222 330 - step number;
#X text 50 88 [euclid] implements an euclidean rythm algorithm. It
takes a step number and returns if that step is a hit or a rest depending
on parameters of: number of steps \, number of hits and rotation value.
, f 65;
#N canvas 780 114 563 524 example 0;
#X obj 192 296 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 192 177 else/count 15;
#X floatatom 264 235 3 0 0 0 - - -;
#X obj 192 142 else/tempo 60 -div 4;
#X obj 192 116 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 174 412 else/out~;
#X obj 174 370 *~;
#X obj 192 331 else/decay~ 250;
#X obj 192 209 hradio 15 1 0 16 empty empty empty 0 -8 0 10 -228856
-1 -1 4;
#X obj 192 262 else/euclid 16 7;
#X text 291 235 <= try different divisions;
#X text 88 43 The algorythm tries to divide a given number of steps
as equally spaced as possible. In the example below we have 16 steps
and \, by default \, 7 hits (change it to check it out), f 56;
#X obj 122 330 noise~;
#X connect 0 0 7 0;
#X connect 1 0 8 0;
#X connect 2 0 9 2;
#X connect 3 0 1 0;
#X connect 4 0 3 0;
#X connect 6 0 5 0;
#X connect 7 0 6 1;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X connect 12 0 6 0;
#X restore 468 257 pd example;
#N canvas 679 77 621 810 drum.seq 0;
#X obj 121 182 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 84 389 slots \$1;
#X obj 157 591 sel 1;
#X obj 179 427 tgl 18 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 121 221 t b b;
#X floatatom 228 222 3 0 0 0 - - -;
#X floatatom 269 253 3 0 0 0 - - -;
#X floatatom 310 282 3 0 0 0 - - -;
#X obj 157 353 else/group;
#X obj 179 453 else/tempo 60 -div 4;
#X obj 157 492 else/drum.seq 2 16 20 0 0 0 0 0 0 0 0 0 0 0 0;
#X obj 187 313 else/euclid 16 5 0;
#X obj 153 283 else/loop;
#X obj 153 251 f 16;
#X obj 157 389 else/insert track 1;
#X obj 451 300 + 1;
#X obj 451 254 vradio 18 1 0 2 empty empty empty 0 -8 0 10 -228856
-1 -1 1;
#X text 473 252 <= track 1;
#X text 473 271 <= track 2;
#X text 256 222 <= number of steps;
#X text 297 253 <= number of hits;
#X text 340 281 <= rotation;
#X text 144 180 <= generate sequence;
#X obj 157 556 route 1 2, f 15;
#X obj 352 591 sel 1;
#X text 203 427 <= play;
#X obj 204 724 else/out~;
#X obj 139 673 *~;
#X obj 157 634 else/decay~ 250;
#X obj 67 633 else/brown~;
#X obj 335 670 *~;
#X obj 353 631 else/decay~ 250;
#X obj 291 631 noise~;
#X msg 451 328 track \$1;
#X text 92 22 In this example we use [euclid] to genetrate values for
[drum.seq]. This way we can check which slots have hits. The example
allows you to set 2 different channels. You can also change the number
of steps (but when you do this \, both tracks get erased)., f 57;
#X text 91 98 Try changing the rotation parameter to visualize how
the sequence gets shifted to the right (for positive rotation values)
or the the left (otherwise).;
#X connect 0 0 4 0;
#X connect 1 0 10 0;
#X connect 2 0 28 0;
#X connect 3 0 9 0;
#X connect 4 0 8 0;
#X connect 4 1 13 0;
#X connect 5 0 11 1;
#X connect 5 0 13 1;
#X connect 6 0 11 2;
#X connect 7 0 11 3;
#X connect 8 0 14 0;
#X connect 9 0 10 0;
#X connect 10 0 23 0;
#X connect 11 2 8 0;
#X connect 12 0 11 0;
#X connect 13 0 1 0;
#X connect 13 0 12 0;
#X connect 14 0 10 0;
#X connect 15 0 33 0;
#X connect 16 0 15 0;
#X connect 23 0 2 0;
#X connect 23 1 24 0;
#X connect 24 0 31 0;
#X connect 27 0 26 0;
#X connect 28 0 27 1;
#X connect 29 0 27 0;
#X connect 30 0 26 1;
#X connect 31 0 30 1;
#X connect 32 0 30 0;
#X connect 33 0 14 1;
#X restore 461 282 pd drum.seq;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 28 0;
#X connect 21 0 28 1;
#X connect 22 0 28 2;
#X connect 23 0 28 3;
#X connect 28 0 0 0;
#X connect 28 1 1 0;
#X connect 28 2 4 0;
