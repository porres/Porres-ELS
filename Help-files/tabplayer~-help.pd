#N canvas 811 68 564 677 10;
#X obj 8 647 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 9 299 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 9 525 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 9 576 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 82 305 cnv 17 3 215 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 84 533 cnv 17 3 17 empty empty 0-n 5 9 0 16 -228856 -162280
0;
#X text 137 304 signal;
#X text 137 533 signal;
#X text 119 599 2) float;
#X text 119 583 1) symbol;
#N canvas 978 108 448 523 multichannel 0;
#X msg 141 297 stop;
#X obj 290 357 bng 30 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 30 19 Multi channel playback is possible (up to 64 channels)
when you specify it with a second argument. The number of channels
defines the number 'n' of outlets - where the first outlets are the
channel inputs and the righmost is the bang outlet.;
#X text 30 91 If more than one channel is set \, the name convention
for multi channel arrays is the table name preceded by the channel
number (starting from zero) and "-" \, such as: "0-" \, "1-" \, "2-"
\, "3-" \, and so on...;
#X obj 101 237 else/sample~ stereo_\$0 stereo.wav;
#X msg 101 209 show;
#X obj 131 325 else/tabplayer~ stereo_\$0 2;
#X obj 127 357 else/out~;
#X text 31 152 You can manually set multi channel arrays in Pd like
that or use the [sample~] object \, which does this internally.;
#X text 48 444 If the [sample~] object has fewer channels than the
number of output channels in [tabplayer~] \, the extra channels output
a zero signal.;
#X msg 131 274 play;
#X connect 0 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 1 7 1;
#X connect 6 2 1 0;
#X connect 10 0 6 0;
#X restore 455 269 pd multichannel;
#X text 181 533 - the playback of a channel, f 61;
#X obj 220 149 tgl 25 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X msg 291 173 stop;
#X msg 161 167 loop \$1;
#X obj 161 145 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X text 143 318 float;
#X text 181 508 - sets array name, f 61;
#X text 101 508 set <symbol>;
#X text 137 452 <stop>;
#X text 131 466 <pause>;
#X text 125 480 <resume>;
#X text 181 452 - stops playing and outputs 0 (cannot be resumed),
f 61;
#X text 181 480 - resumes playing after being paused, f 61;
#X text 181 494 - non zero enables looping \, <0> disbales it, f 61
;
#X obj 367 223 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#N canvas 921 149 375 404 signal 0;
#X obj 96 226 phasor~;
#X floatatom 169 249 0 0 0 0 - - -;
#X obj 96 285 else/tabplayer~ \$0-violin;
#X obj 96 320 else/out~;
#X obj 96 194 else/display~ 6;
#X obj 96 143 osc~ 0.1;
#X obj 96 253 *~ 0;
#X obj 169 224 receive \$0-array_size;
#X obj 96 169 *~ 0.2;
#X text 36 21 A signal input can be used as the index position in samples
to read into the array. You can use any signal such as from a [line~]
object or a LFO. A signal offers the ability to read the array at a
varying speed as the example below., f 50;
#X text 36 85 When a signal is connected \, control play messages are
ignored. You can also notice this makes it kind of like [tabread4~].
, f 50;
#X obj 241 312 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X connect 0 0 6 0;
#X connect 1 0 6 1;
#X connect 2 0 3 0;
#X connect 2 1 11 0;
#X connect 4 0 0 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X restore 443 249 pd signal control;
#X obj 9 618 cnv 3 550 3 empty empty flags 8 12 0 13 -228856 -1 0;
#X obj 84 554 cnv 17 3 17 empty empty n+1 5 9 0 16 -228856 -162280
0;
#X text 149 555 bang;
#X text 357 252 finished;
#X text 360 264 playing;
#X text 181 416 -;
#X text 181 466 - pauses at a particular point (can be resumed), f
61;
#X text 324 173 (same as zero);
#X obj 35 224 send \$0-array_size;
#X obj 35 202 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 290646 256;
#X text 182 599 - number of output channels (default 1 \, maximum 64)
, f 61;
#X obj 305 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 4 pd;
#X obj 344 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 22 41 cnv 4 4 4 empty empty Array/table 0 28 2 18 -233017 -1
0;
#X obj 457 12 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 477 12 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 514 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 463 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 501 27 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 113 41 cnv 4 4 4 empty empty player 0 28 2 18 -233017 -1 0;
#X obj 2 4 cnv 15 301 42 empty empty tabplayer~ 20 20 2 37 -233017
-1 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 4 graph;
#X obj 220 233 else/out~;
#X text 182 582 - table name (optional), f 61;
#X obj 220 198 else/tabplayer~ \$0-violin;
#N canvas 1018 51 405 507 loop 0;
#X msg 149 207 loop \$1;
#X obj 149 176 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 296 282 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 288 396 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 65 149 stop;
#X obj 149 117 loadbang;
#X obj 149 246 else/tabplayer~ \$0-violin;
#X obj 149 281 else/out~;
#X obj 106 412 else/out~;
#X obj 105 358 else/tabplayer~ \$0-violin -loop;
#X msg 105 149 play;
#X text 68 34 The loop message takes a float \, where a non-zero value
enables looping and \, 0 disables it (default is disabled). You can
set it to loop with the -loop flag., f 37;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 4 0 6 0;
#X connect 4 0 9 0;
#X connect 5 0 10 0;
#X connect 5 0 1 0;
#X connect 6 0 7 0;
#X connect 6 1 2 0;
#X connect 9 0 8 0;
#X connect 9 1 3 0;
#X connect 10 0 6 0;
#X connect 10 0 9 0;
#X restore 503 229 pd loop;
#X obj 35 156 else/sample~ \$0-violin violin.wav, f 12;
#X msg 281 151 play;
#X text 214 626 -loop: sets to loop mode;
#X text 89 416 play <f \, f \, f>;
#X text 193 416 start playing \, if no float is given \, array is played
from start to end. 1st float sets start \, 2nd sets end (in ms) and
3rd sets speed rate, f 59;
#X text 101 494 loop <float>;
#X text 95 346 start <float>;
#X text 107 360 end <float>;
#X text 101 374 range <f \, f>;
#X text 95 402 speed <float>;
#X text 181 402 - sets playing speed in percentage, f 61;
#X obj 257 150 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 149 332 bang;
#X text 181 332 - play (same as non-zero), f 61;
#X text 181 318 - non-zero plays \, <0> stops, f 61;
#X text 316 151 (same as non-zero);
#N canvas 685 112 753 548 basic 0;
#X obj 52 56 tgl 25 0 empty empty empty 17 7 0 10 -228856 -1 -1 0 1
;
#X msg 80 118 stop;
#X text 116 112 same as 'zero': stops playing and outputs 0 (cannot
be resumed), f 33;
#X msg 93 144 pause;
#X msg 104 167 resume;
#X text 135 144 pauses playing;
#X text 148 167 resumes after being paused;
#X text 37 21 Basic control messages:;
#X obj 227 391 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 568 367 bng 25 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 80 352 else/tabplayer~ \$0-violin;
#X obj 80 390 else/out~;
#X obj 421 329 else/tabplayer~ \$0-violin;
#X obj 421 367 else/out~;
#X text 503 197 play half second from 250 ms;
#X text 84 60 'non zero' plays the array \, zero stops;
#X msg 116 245 start \$1;
#X msg 244 245 speed \$1;
#X floatatom 116 222 8 0 0 0 - - -;
#X floatatom 179 222 8 0 0 0 - - -;
#X floatatom 244 222 5 0 0 0 - - -;
#X msg 421 198 play 250 750;
#X msg 439 225 play 0 1000 50;
#X text 534 224 play 1st second at half speed;
#X text 403 47 The 'play' message can also take up to 3 floats that
specify \; 1) starting point in the array (in ms) \; 2) end point (in
ms) \; 3) speed rate percentage \; If no floats are given \, then it
plays from the setted start/end points in the given rate. The arguments
of the play message changes the parameters of start/end and speed,
f 50;
#X msg 446 250 play 0 1000 -50;
#X text 549 245 play 1st second at half speed in reverse, f 21;
#X msg 452 274 play;
#X text 484 273 play with previous settings;
#X msg 409 175 play 500;
#X text 466 174 play from half second;
#X msg 179 245 end \$1;
#X obj 458 299 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 482 300 same as 'play' without arguments;
#X msg 208 319 reset;
#X msg 208 290 range 250 750;
#X text 295 286 sets start and end, f 10;
#X text 249 316 reset to start = 0 and end = array size, f 20;
#X obj 67 91 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 91 93 Same as 'non zero';
#X text 115 197 set start/end (in ms) and speed (%);
#X text 261 341 also useful when array size changes, f 18;
#X text 191 483 If 'start' is greater than 'end' \, the values are
swapped.;
#X connect 0 0 10 0;
#X connect 1 0 10 0;
#X connect 3 0 10 0;
#X connect 4 0 10 0;
#X connect 10 0 11 0;
#X connect 10 1 8 0;
#X connect 12 0 13 0;
#X connect 12 1 9 0;
#X connect 16 0 10 0;
#X connect 17 0 10 0;
#X connect 18 0 16 0;
#X connect 19 0 31 0;
#X connect 20 0 17 0;
#X connect 21 0 12 0;
#X connect 22 0 12 0;
#X connect 25 0 12 0;
#X connect 27 0 12 0;
#X connect 29 0 12 0;
#X connect 31 0 10 0;
#X connect 32 0 12 0;
#X connect 34 0 10 0;
#X connect 35 0 10 0;
#X connect 38 0 10 0;
#X restore 497 209 pd basic;
#X text 143 388 reset;
#X text 181 388 - resets range from 0 to array size, f 61;
#X text 181 346 - sets start point in ms, f 61;
#X text 181 360 - sets end point in ms, f 61;
#X text 181 374 - sets start and end point range in ms, f 61;
#X obj 89 263 else/player~;
#X text 181 304 - playback index position, f 61;
#X text 80 89 [tabplayer~] plays arrays \, it's more powerful than
[tabplay~] as it has multichannel support and can play backwards and
in different speeds. It can also loop., f 61;
#X text 181 555 - when it stops/finishes playing or when looping,
f 61;
#X text 31 263 see also:;
#X connect 12 0 52 0;
#X connect 13 0 52 0;
#X connect 14 0 52 0;
#X connect 15 0 14 0;
#X connect 36 0 35 0;
#X connect 52 0 50 0;
#X connect 52 1 25 0;
#X connect 54 0 36 0;
#X connect 55 0 52 0;
#X connect 65 0 52 0;
