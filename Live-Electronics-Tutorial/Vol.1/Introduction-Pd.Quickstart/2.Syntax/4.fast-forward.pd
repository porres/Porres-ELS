#N canvas 702 53 741 599 12;
#X msg 156 450 stop;
#X obj 156 417 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 156 343 trigger float float bang, f 25;
#X msg 242 424 fast-forward \$1;
#X obj 242 457 send pd;
#X obj 156 381 delay;
#X msg 399 308 \; pd dsp 1;
#X obj 399 276 loadbang;
#X msg 156 280 1000;
#X obj 328 528 writesf~;
#X floatatom 156 312 5 0 1000 0 - - -;
#X msg 328 374 open test.wav \, start;
#X text 489 306 Turn DSP on when loading the patch, f 18;
#X text 396 529 <= records to a sound file;
#X obj 357 485 noise~;
#X text 411 485 <= white noise generator;
#X text 68 451 stop the => recording, f 11;
#X text 356 423 <=;
#X text 477 374 <=;
#X text 49 382 send a bang after the time amount, f 11;
#X text 132 382 =>;
#X text 466 314 <=;
#X text 98 32 We've seen in the last example the "dsp" message to Pd
to turn DSP on and off. Here we use ths message with loadbang so the
dsp is turned on when the patch is loaded., f 74;
#X text 98 84 But anyway \, this example is dedicated to the "fast-forward"
message. This is a very interestng feature because Pd is mostly used
to generate and process things in realtime \, but this allows you to
'render' an amount of audio as fast as your process can handle. In
this example we use this feature to record white noise into a sound
file named 'test.wav' (check the generated audio in the same folder
as this example)., f 74;
#X text 196 278 <= time amount to render;
#X text 199 311 <= set other lenghts;
#X text 378 416 Tell pd to 'fast-forward' and render a given amount
of time in ms., f 36;
#X text 48 311 miliseconds =>;
#X text 98 184 This is very useful if you want to process a pre recorded
audio in a Pd patch or to generate an audio file with a generative
(or automated) patch. You can also use [tabwrite~] to record to arrays
used as audio buffers \, something we'll see in this tutorial later
on., f 74;
#X text 498 367 create 'test.wav' file and start recording, f 22;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 5 0;
#X connect 2 1 3 0;
#X connect 2 2 11 0;
#X connect 3 0 4 0;
#X connect 5 0 1 0;
#X connect 7 0 6 0;
#X connect 8 0 10 0;
#X connect 10 0 2 0;
#X connect 11 0 9 0;
#X connect 14 0 9 0;
