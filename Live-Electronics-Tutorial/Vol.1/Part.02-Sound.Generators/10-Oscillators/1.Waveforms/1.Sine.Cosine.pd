#N canvas 548 42 490 683 12;
#X declare -path else;
#X obj 128 221 sin~;
#X obj 163 398 osc~ 440;
#X obj 128 184 phasor~ 440;
#X obj 128 255 out~;
#X obj 163 436 out~;
#X obj 122 622 out~;
#X obj 122 583 sine~ 440;
#X obj 247 620 out~;
#X obj 247 581 cosine~ 440;
#X text 53 220 Sine Wave;
#X obj 231 255 out~;
#X obj 231 221 cos~;
#X text 264 220 Cosine Wave;
#X text 37 55 Both sine and cosine are basically the same thing. There's
only an initial phase difference (a pahse quadrature difference). A
proper sine wave \, though \, needs to have the initial phase of the
sine function. If the initial phase is that of a cosine \, then we
have a cosine wave oscillator. We can implement these oscillators with
[phasor~] and the [sin~]/[cos~] functions.;
#X text 42 333 The native [osc~] object is a cosine wave oscillator
\, which is more CPU efficient that [phasor~] + [cos~]. In contrast
\, [phasor~] + [cos~] allows phase modulation.;
#X text 46 510 The ELSE library has Sine and Cosine wave oscillators
\, both of wich allows phase reset (as with [osc~] and [phasor~] \,
but they also allow phase modulation on the right inlet.;
#X obj 284 19 declare -path else;
#X connect 0 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 2 0 11 0;
#X connect 6 0 5 0;
#X connect 8 0 7 0;
#X connect 11 0 10 0;
