#N canvas 404 33 903 518 12;
#X declare -path else;
#X obj 375 458 nbx 4 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 13
-228856 -1 -1 -20 256;
#X text 434 459 dBFS;
#X obj 70 270 meter~;
#X obj 69 433 out~;
#X obj 386 299 setdsp~ 1;
#X obj 258 270 meter~ 4096 4096;
#X obj 375 434 rint;
#X obj 258 433 out~;
#X obj 276 60 initmess -20;
#X obj 276 85 nbx 4 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 13
-228856 -1 -1 -20 256;
#X text 337 87 dBFS;
#X obj 314 147 mov.rms~ 1024;
#X obj 276 172 /~;
#X obj 276 110 db2lin~;
#X obj 314 173 display~ 5;
#X obj 258 242 *~;
#X obj 276 208 display~ 5;
#X obj 494 327 norm~ -30 -size 1024;
#X obj 494 355 meter~ 4096 4096;
#X text 323 211 <= ratio;
#X text 445 141 It is also based on [mov.rms~] to give us a running
RMS analysis. The adjustment is with a simple division between the
target amplitude and the running RMS. The result is a ratio that we
use to multiply the input so we can reach the target., f 61;
#X text 451 243 This patch is implemented in the [norm~] abstraction
from the ELSE library. Check it below \, open its help file.;
#X text 566 390 This process can be used in conjunction to a noise
gate (in an earlier stage) to avoid that a noise floor is raised to
the normalized value!, f 41;
#X text 445 100 This realtime normalizer patch continuously adjusts
the gain to a fixed RMS value., f 61;
#X obj 697 59 declare -path else;
#X obj 494 299 play.file~ 1 MouthBow.wav 1 1;
#X obj 70 71 play.file~ 1 kantele.wav 1 1, f 15;
#X connect 2 0 3 0;
#X connect 5 0 7 0;
#X connect 5 1 6 0;
#X connect 6 0 0 0;
#X connect 8 0 9 0;
#X connect 9 0 13 0;
#X connect 11 0 14 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 12 1;
#X connect 15 0 5 0;
#X connect 16 0 15 1;
#X connect 17 0 18 0;
#X connect 25 0 17 0;
#X connect 26 0 11 0;
#X connect 26 0 2 0;
#X connect 26 0 15 0;
