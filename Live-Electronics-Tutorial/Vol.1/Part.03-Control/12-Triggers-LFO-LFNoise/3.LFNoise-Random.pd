#N canvas 376 79 968 513 12;
#X declare -path else;
#X obj 89 253 *~;
#X obj 59 214 osc~;
#X obj 262 230 osc~;
#X obj 59 141 rampnoise~ 5;
#X obj 59 173 rescale~ 500 1500;
#X obj 262 191 rescale~ 500 1500;
#X obj 262 153 stepnoise~ 7;
#X obj 107 217 rampnoise~ 3;
#X obj 262 123 nbx 5 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 12
-228856 -1 -1 0 256;
#X obj 59 112 nbx 5 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 12
-228856 -1 -1 0 256;
#X obj 715 261 display;
#X obj 815 261 display;
#X obj 804 381 display~;
#X obj 701 381 display~;
#X obj 815 195 impulse 1;
#X obj 804 318 impulse~ 1;
#X obj 482 465 gbman~;
#X obj 431 466 henon~;
#X obj 378 467 ikeda~;
#X obj 593 441 latoocarfian~;
#X obj 489 441 cusp~;
#X obj 533 442 lorenz~;
#X obj 533 464 standard~;
#X obj 606 463 lincong~;
#X obj 372 441 quad~;
#X obj 417 441 logistic~;
#X obj 241 446 lfnoise~;
#X text 37 445 [lfnoise~] can generate ==> both ramps or step values
, f 27;
#X obj 89 290 plate.rev~ 50 0.6 0.25 0.8 0.666, f 18;
#X obj 262 268 plate.rev~ 50 0.6 0.25 0.8 0.666, f 18;
#X obj 701 355 rand.i~ 10 20;
#X obj 804 355 rand.f~ 10 20;
#X obj 715 237 rand.i 10 20;
#X obj 815 237 rand.f 10 20;
#X text 21 22 Noise generators with low frequencies can be used as
random controls in patches and replace random number generators. Below
we have random ramps in the left and random steps in the right. And
why not add some reverb so just it sounds cooler? See the [plate.rev~]
object from ELSE., f 63;
#X obj 769 23 declare -path else;
#X floatatom 496 188 5 0.1 10 0 - - -;
#X obj 499 238 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 8289 1;
#X obj 496 260 rescale 500 1500;
#X obj 470 309 bp~ 0 10;
#X obj 442 238 noise~;
#X obj 470 346 out~;
#X obj 496 286 nbx 7 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 1152.67 256;
#X obj 496 212 lfnoise 0.5 1;
#N canvas 508 120 525 301 random 0;
#X obj 92 81 metro 500;
#X obj 92 54 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 1 1
;
#X obj 92 219 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 54.99 256;
#X obj 92 158 pack float 500;
#X obj 92 27 loadbang;
#X obj 95 246 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 5499 1;
#X obj 92 112 random 128;
#X obj 92 188 line 0 5;
#X obj 187 52 nbx 3 14 -1e+37 1e+37 0 0 empty empty ms 0 -8 0 12 -228856
-1 -1 0 256;
#X obj 92 136 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 58 256;
#X text 242 112 How to implement a "ramp noise" with random and [line].
, f 31;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 2 0 5 0;
#X connect 3 0 7 0;
#X connect 4 0 1 0;
#X connect 6 0 9 0;
#X connect 7 0 2 0;
#X connect 8 0 3 1;
#X connect 8 0 0 1;
#X connect 9 0 3 0;
#X restore 639 185 pd random;
#X text 701 442 <= these chaotic noise objects can also operate with
low frequencies, f 33;
#X obj 592 334 stepnoise;
#X obj 591 358 rampnoise;
#X text 575 307 see also:;
#X obj 281 321 out~;
#X obj 104 343 out~;
#X text 494 61 The native object [random] is a random number generator.
You could use it to generate random control values and even random
ramps (check [pd random] below). The ELSE library also has a [lfnoise]
control object for both step and ramp noises - as well as [stepnoise]
and [rampnoise]. The ELSE library also has [rand.i]/[rand.f] and [rand.i~]/[rand.f~]
objects for random number generation., f 63;
#X connect 0 0 28 0;
#X connect 1 0 0 0;
#X connect 2 0 29 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 5 0 2 0;
#X connect 6 0 5 0;
#X connect 7 0 0 1;
#X connect 8 0 6 0;
#X connect 9 0 3 0;
#X connect 14 0 32 0;
#X connect 14 0 33 0;
#X connect 15 0 30 0;
#X connect 15 0 31 0;
#X connect 28 0 50 0;
#X connect 28 1 50 1;
#X connect 29 0 49 0;
#X connect 29 1 49 1;
#X connect 30 0 13 0;
#X connect 31 0 12 0;
#X connect 32 0 10 0;
#X connect 33 0 11 0;
#X connect 36 0 43 0;
#X connect 37 0 38 0;
#X connect 38 0 42 0;
#X connect 39 0 41 0;
#X connect 40 0 39 0;
#X connect 42 0 39 1;
#X connect 43 0 37 0;
