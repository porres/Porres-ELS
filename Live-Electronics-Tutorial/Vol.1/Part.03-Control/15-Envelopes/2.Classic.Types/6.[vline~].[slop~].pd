#N canvas 365 31 750 629 12;
#X declare -path else;
#X obj 270 498 *~;
#X obj 268 358 vline~;
#X obj 120 217 t f f;
#X obj 120 272 pack;
#X obj 152 243 * 0.5;
#X obj 120 91 == 0;
#X obj 174 411 osc~ 440;
#X obj 270 540 out~;
#X msg 268 298 0 250;
#X msg 120 298 \$1 150 \, \$2 100 150;
#X obj 120 33 tgl 18 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X msg 398 298 250;
#X msg 361 298 100;
#X text 319 297 decay;
#X text 423 297 release;
#X obj 120 64 trigger float float, f 28;
#X obj 120 189 float;
#X obj 120 119 select 0 1;
#X obj 361 347 expr 1000./$f1;
#X text 526 412 attack;
#X obj 288 460 slop~ 1e+09, f 18;
#X obj 411 382 loadbang;
#X obj 411 411 expr 1000./150.;
#X text 26 258 gate/sustain values =====>, f 13;
#X text 371 88 Here's how to implement an ADSR exponential envelope
with vanilla. We use again the [slop~] object for that. We need to
calculate the sustain point from the gate input value and also take
care to set different downward periods for the decay and release part.
The patch to the left relates to the [adsr~] object with the parameters
below., f 43;
#X obj 518 36 declare -path else;
#X obj 437 233 adsr~ 150 100 0.5 250 -log;
#X connect 0 0 7 0;
#X connect 1 0 20 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 9 0;
#X connect 4 0 3 1;
#X connect 5 0 17 0;
#X connect 6 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X connect 10 0 15 0;
#X connect 11 0 18 0;
#X connect 12 0 18 0;
#X connect 15 0 5 0;
#X connect 15 1 16 1;
#X connect 16 0 2 0;
#X connect 17 0 16 0;
#X connect 17 0 12 0;
#X connect 17 1 8 0;
#X connect 17 1 11 0;
#X connect 18 0 20 3;
#X connect 20 0 0 1;
#X connect 21 0 22 0;
#X connect 22 0 20 5;
