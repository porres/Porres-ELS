#N canvas 557 59 975 638 12;
#X declare -path else;
#X obj 333 25 declare -path else;
#X obj 100 229 random 100;
#X obj 100 263 moses 70;
#X obj 153 296 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 100 199 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 100 296 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 96 319 70%;
#X text 151 319 30%;
#X obj 251 229 random 100;
#X obj 251 200 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 251 296 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 251 263 moses 50;
#X obj 333 296 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 333 263 moses 75;
#X text 329 319 25%;
#X obj 386 296 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 382 319 25%;
#X text 246 319 50%;
#X text 41 65 You can use random generators (like [random]/[rand.i]/rand.f])
to generate random values as sequences and you proably know about that
already. But now we'll talk about "Weighted random" \, where somew
random values have more probabilities of happening than another. A
simple vanilla mechanism for this is with [moses] \, and you can stack
many of them for that matter., f 63;
#X obj 215 495 random 100;
#X obj 215 465 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 215 562 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 210 585 50%;
#X obj 215 529 spread 50 75;
#X obj 255 562 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 251 585 25%;
#X obj 296 562 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 292 585 25%;
#X text 58 375 The ELSE library has the [spread] object that is similar
to [moses] but offers many outputs so you don't need to stack lots
of [moses] objects. But the library also offers other options that
are more proper.;
#X obj 790 40 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 790 71 chance 50 25 25, f 16;
#X obj 790 110 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 785 133 50%;
#X obj 844 110 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 840 133 25%;
#X obj 899 109 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 895 132 25%;
#X text 537 65 A more proper weighted random is possible with [chance].
check its help file., f 34;
#X obj 721 398 sequencer 60 67 69 62 65 72;
#X obj 721 458 mtof;
#X obj 721 507 decay2~ 50 500;
#X obj 674 516 *~;
#X obj 674 547 out~;
#X obj 721 337 chance -index 5 7 3 1 4 3;
#X text 530 166 Here we use [chance] to generate a weigthed random
output that we're using as the index of a sequence. The total number
of chances is the sum of all arguments (24). Frst element has the probability
of 5/24 to be called \, the second has 7/24 and so on.;
#X obj 721 256 tgl 17 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 721 310 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X floatatom 721 369 3 0 0 0 - - -;
#X floatatom 721 427 4 0 0 0 - - -;
#X obj 721 282 tempo 60 5 -div 4;
#X obj 721 483 b;
#X obj 674 488 tri~;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 2 1 3 0;
#X connect 4 0 1 0;
#X connect 8 0 11 0;
#X connect 9 0 8 0;
#X connect 11 0 10 0;
#X connect 11 1 13 0;
#X connect 13 0 12 0;
#X connect 13 1 15 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 23 0 21 0;
#X connect 23 1 24 0;
#X connect 23 2 26 0;
#X connect 29 0 30 0;
#X connect 30 0 31 0;
#X connect 30 1 33 0;
#X connect 30 2 35 0;
#X connect 38 0 48 0;
#X connect 39 0 50 0;
#X connect 39 0 51 0;
#X connect 40 0 41 1;
#X connect 41 0 42 0;
#X connect 43 0 47 0;
#X connect 45 0 49 0;
#X connect 46 0 43 0;
#X connect 47 0 38 0;
#X connect 48 0 39 0;
#X connect 49 0 46 0;
#X connect 50 0 40 0;
#X connect 51 0 41 0;
