#N struct 1066-DS float color;
#N struct 1066-fill float color;
#N canvas 555 89 480 586 12;
#X declare -path else;
#X obj 164 243 pointer;
#N canvas 203 319 985 322 template-1 0;
#X obj 611 198 drawpolygon color 20 0 25 95 25;
#X obj 145 270 drawnumber color 100 20 color color=;
#X text 523 22 And now we include a shape in the data structure object.
This shape is a simple line drawn with the [drawpolygon] object. The
first argument is a float that defines the color. Again \, we use the
"color" float as defined in [struct]., f 57;
#X text 523 104 The second argument is the line width of the polygon
in pixels. The next arguments are pairs of point coordinates to connect
with the line. Here we have just two pairs of coordinates (0/25) and
(95/25) - so a line is drawn to connect these two dots., f 57;
#X text 533 247 Note that both the "color" number and the line part
of the same Data Structures template. This means both drawings form
a single graphic object.;
#X text 96 45 Data Structure named "\$0-DS" holding a float called
"color"., f 35;
#X obj 120 107 struct \$0-DS float color;
#X text 48 153 The [drawnumber] now has more arguments \, besides the
float name to draw \, we have three number values. The two first ones
are the "x/y" coordinates (100/20). The third value defines the color
of the number and is defined by the variable name "color". The last
argument is a label for the number display.;
#X restore 163 122 pd template-1;
#N canvas 547 174 421 518 template-2 0;
#X obj 67 171 drawnumber color 105 50 color color=;
#X text 53 142 Draw instructions for the "color" float.;
#X obj 50 460 filledpolygon color 0 5 0 105 100 105 50 60;
#X obj 63 286 drawpolygon color 5 0 5 100 5 50 55 0 5;
#X text 54 339 The [filledpolygon] needs an extra first argument to
set the internal color \, and it doesn't need to close the shape with
four coordinate points to draw a triangle - three points is already
enough to draw the shape., f 40;
#X obj 58 98 struct \$0-fill float color;
#X text 58 38 Data Structure named "\$0-fill" holding a float called
"color"., f 31;
#X text 61 224 Here we have a polygon with four coordinate pair points
\, which form a triangle, f 29;
#X restore 130 394 pd template-2;
#X text 35 26 Now let's have more fun with drawing instructions and
insert a simple line shape with [drawpolygon]. See the [pd template-1]
subpatch. In the [pd display-1] subpatch \, click and drag the number
to see the colors change., f 55;
#X text 30 310 Next \, we draw a bit less simple shapes and also use
the [filledpolygon] object. See the [pd template-1] subpatch for more
details. You can also click and drag the number to change colors.,
f 51;
#X obj 41 271 append \$0-DS color;
#N canvas 1089 103 358 171 \$0-display-1 1;
#X scalar 1066-DS 500 \;;
#X restore 278 122 pd \$0-display-1;
#N canvas 1091 335 383 313 \$0-display-2 1;
#X scalar 1066-fill 450 \;;
#X restore 235 394 pd \$0-display-2;
#X msg 290 190 clear \, vis 1;
#X msg 164 196 traverse \$1 \, bang, f 12;
#X obj 41 206 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 500 256;
#X obj 290 217 s pd-\$0-display-1;
#X obj 41 160 trigger2 500 pd-\$0-display-1 bang, f 36;
#X obj 176 510 pointer;
#X msg 288 462 clear \, vis 1;
#X msg 176 463 traverse \$1 \, bang, f 12;
#X obj 39 478 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 450 256;
#X obj 39 432 trigger2 450 pd-\$0-display-2 bang, f 36;
#X obj 288 489 s pd-\$0-display-2;
#X obj 39 543 append \$0-fill color;
#X obj 41 128 loadbang;
#X obj 39 400 loadbang;
#X obj 289 269 declare -path else;
#X connect 0 0 5 1;
#X connect 8 0 11 0;
#X connect 9 0 0 0;
#X connect 10 0 5 0;
#X connect 12 0 10 0;
#X connect 12 1 9 0;
#X connect 12 2 8 0;
#X connect 13 0 19 1;
#X connect 14 0 18 0;
#X connect 15 0 13 0;
#X connect 16 0 19 0;
#X connect 17 0 16 0;
#X connect 17 1 15 0;
#X connect 17 2 14 0;
#X connect 20 0 12 0;
#X connect 21 0 17 0;
